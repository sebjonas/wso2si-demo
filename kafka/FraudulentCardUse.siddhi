@App:name("FraudulentCardUse")
@App:description("Detect fraudulent use of a credit card.")

@source(type='kafka',
        topic.list='trade-stream',
        partition.no.list='0',
        threading.option='single.thread',
        group.id="group",
        bootstrap.servers='localhost:9092',
        @map(type='json'))
define stream TradeStream(creditCardNo string, amount double);

@sink(type='kafka',
      topic='suspicious-trade-stream',
      bootstrap.servers='localhost:9092',
      partition.no='0',
      @map(type='json'))
@sink(type='log')
define stream SuspiciousTradeStream(creditCardNo string, totalAmount double, totalCount long);

@info(name='SuspiciousTrade')
from TradeStream#window.time(20 sec)
select 
    creditCardNo, 
    sum(amount) as totalAmount,
    count(creditCardNo) as totalCount
group by creditCardNo 
having totalAmount > 10000.0 and totalCount > 2
insert into SuspiciousTradeStream;